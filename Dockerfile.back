# Use the official Golang image to create a build artifact.
# This is based on Debian and sets the GOPATH to /go.
# https://hub.docker.com/_/golang
FROM golang:1.13 as builder

# <-------
#ENV MAKEFLAGS="-j$(nproc) -s"
ARG DLIB_VERSION=19.3

# WORKDIR /usr/local/src

RUN cat /etc/os-release

# #install dlib
# RUN apt-get -y install wget
# RUN apt-get update &&\
#     apt-get install -y --no-install-recommends python libboost-dev cmake

# RUN apt-get install bzip2

# RUN cd /usr/local/src  &&\
#     git clone  --depth 1 https://github.com/davisking/dlib.git  && \
#     git clone  --depth 1 https://github.com/yidian7/some_file.git

# RUN mv some_file/interpolation_abstract.h dlib/dlib/image_transforms/ && \
#     cd dlib/examples && \
#     mkdir build && \
#     cd build && \
#     cmake .. && \
#     cmake --build . --config Release && \
#     cd ..
# RUN wget http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2 && \
#     bunzip2 shape_predictor_68_face_landmarks.dat.bz2
# # <-------

RUN apt-get install libdlib-dev libopenblas-dev libjpeg62-turbo-dev

# Create and change to the app directory.
WORKDIR /app

# Retrieve application dependencies.
# This allows the container build to reuse cached dependencies.
COPY go.* ./
RUN go mod download

RUN go mod init helloworld-go

# Copy local code to the container image.
COPY . ./

RUN pwd

RUN ls -alh

RUN mkdir -p /usr/local/lib/pkgconfig/

RUN touch /usr/local/lib/pkgconfig/dlib-1.pc

RUN mv dlib-1.pc /usr/local/lib/pkgconfig/dlib-1.pc

# Build the binary.
# RUN GOOS=linux go build -mod=readonly -v -o server
RUN go build -v -o server
# RUN CGO_ENABLED=0 GOOS=linux go build -mod=readonly -v -o server

# Use the official Alpine image for a lean production container.
# https://hub.docker.com/_/alpine
# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds
FROM alpine:3
RUN apk add --no-cache ca-certificates

# Copy the binary to the production image from the builder stage.
COPY --from=builder /app/* /

# Run the web service on container startup.
CMD ["/server"]